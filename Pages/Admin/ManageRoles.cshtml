@page
@model MiniAccountManagementSystem.Pages.Admin.ManageRolesModel
@{
    ViewData["Title"] = "Manage Roles & Permissions";
}

<h1>Manage Roles & Permissions</h1>
<link href="https://unpkg.com/tabulator-tables@5.5.2/dist/css/tabulator.min.css" rel="stylesheet">
<script src="https://unpkg.com/tabulator-tables@5.5.2/dist/js/tabulator.min.js"></script>

<!-- Render one antiforgery token for JS to use -->
<form id="antiforgery-form" style="display:none">
    @Html.AntiForgeryToken()
</form>

<h2>Users</h2>
<div id="users-table"></div>

<h2>Roles</h2>
<div id="roles-table"></div>

<h2>Permissions</h2>
<div id="permissions-table"></div>

<script>
    // Get the anti-forgery token value from the hidden form
    var antiforgeryToken = document.querySelector('#antiforgery-form input[name="__RequestVerificationToken"]').value;

    var usersTable = new Tabulator("#users-table", {
        data: @Json.Serialize(Model.Users),
        columns: [
            { title: "Email", field: "email" },
            { title: "User ID", field: "id", visible: false },
            {
                title: "Assigned Roles", formatter: function(cell) {
                    var userId = cell.getRow().getData().id;
                    return `<div id="roles_${userId}">Loading...</div>`;
                }
            },
            {
                title: "Assign Role", formatter: function(cell) {
                    var userId = cell.getRow().getData().id;
                    return `<div>
                        <form method="post" action="/Admin/ManageRoles?handler=AssignRole">
                            <input type="hidden" name="__RequestVerificationToken" value="${antiforgeryToken}" />
                            <input type="hidden" name="userId" value="${userId}" />
                            <select name="role">
                                <option value="Admin">Admin</option>
                                <option value="Accountant">Accountant</option>
                                <option value="Viewer">Viewer</option>
                            </select>
                            <button type="submit">Assign</button>
                        </form>
                    </div>`;
                }
            }
        ],
        rowFormatter: function(row) {
            var userId = row.getData().id;
            fetch(`/Admin/GetUserRoles?userId=${userId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById(`roles_${userId}`).textContent = data.join(", ") || "No roles assigned";
                })
                .catch(error => {
                    document.getElementById(`roles_${userId}`).textContent = "Error loading roles";
                    console.error("Error loading roles:", error);
                });
        }
    });

    var rolesTable = new Tabulator("#roles-table", {
        data: @Json.Serialize(Model.Roles),
        columns: [
            { title: "Role Name", field: "name" }
        ]
    });

    var permissionsTable = new Tabulator("#permissions-table", {
        data: @Json.Serialize(Model.Permissions),
        columns: [
            { title: "Role Name", field: "roleName" },
            { title: "Module Name", field: "moduleName" },
            { title: "Can View", field: "canView", formatter: "tickCross" },
            { title: "Can Create", field: "canCreate", formatter: "tickCross" },
            { title: "Can Edit", field: "canEdit", formatter: "tickCross" },
            { title: "Can Delete", field: "canDelete", formatter: "tickCross" },
            {
                title: "Update Permission", formatter: function(cell) {
                    var permission = cell.getRow().getData();
                    return `<div>
                        <form method="post" action="/Admin/ManageRoles?handler=UpdatePermission">
                            <input type="hidden" name="__RequestVerificationToken" value="${antiforgeryToken}" />
                            <input type="hidden" name="permissionId" value="${permission.permissionId}" />
                            <label><input type="checkbox" name="canView" value="true" ${permission.canView ? 'checked' : ''} /> View</label>
                            <label><input type="checkbox" name="canCreate" value="true" ${permission.canCreate ? 'checked' : ''} /> Create</label>
                            <label><input type="checkbox" name="canEdit" value="true" ${permission.canEdit ? 'checked' : ''} /> Edit</label>
                            <label><input type="checkbox" name="canDelete" value="true" ${permission.canDelete ? 'checked' : ''} /> Delete</label>
                            <button type="submit">Update</button>
                        </form>
                    </div>`;
                }
            }
        ]
    });
</script>